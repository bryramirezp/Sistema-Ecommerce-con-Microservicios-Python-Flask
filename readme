# Sistema de Microservicios para una Joyer√≠a ("El Brillo")

Este proyecto es una implementaci√≥n de un sistema de comercio electr√≥nico para una joyer√≠a ficticia llamada **"El Brillo"**, desarrollado como parte del primer parcial de la materia *Integraci√≥n de Aplicaciones y Computaci√≥n en la Nube*.  
La principal caracter√≠stica del proyecto es su **arquitectura de microservicios**, que desacopla las responsabilidades del negocio en servicios independientes y escalables.

## Demostraci√≥n Visual

| Interfaz Principal | Factura Generada | Verificaci√≥n en Base de Datos |
|--------------------|------------------|-------------------------------|
| ![Interfaz principal de la joyer√≠a](https://raw.githubusercontent.com/bryramirezp/Portafolio-UDEM/main/Integ_aplicaciones_computacion/Parcial_1/Interfaz%20Principal%20de%20la%20Aplicaci%C3%B3n.png) | ![Factura generada en la interfaz](https://raw.githubusercontent.com/bryramirezp/Portafolio-UDEM/main/Integ_aplicaciones_computacion/Parcial_1/Resultado%20Final%20-%20Factura%20Generada.png) | ![Consulta a la base de datos mostrando la √∫ltima factura](https://raw.githubusercontent.com/bryramirezp/Portafolio-UDEM/main/Integ_aplicaciones_computacion/Parcial_1/Verificaci%C3%B3n%20en%20la%20Base%20de%20Datos.png) |

## üöÄ Arquitectura

El sistema se compone de cuatro componentes principales que se ejecutan de forma independiente:

- **1. Servidor Web (Frontend):**
  - Es una **Single Page Application (SPA)** construida con HTML, CSS y JavaScript puro.
  - Renderiza el cat√°logo de productos, gestiona el carrito de compras y orquesta las llamadas a los diferentes microservicios.
  - Detecta din√°micamente el *hostname* para construir las URLs de los microservicios, lo que facilita su configuraci√≥n y despliegue.

- **2. Microservicio de Productos:**
  - **Tecnolog√≠a:** Python + Flask.
  - **Responsabilidad:** Gestionar y exponer el cat√°logo de productos de la joyer√≠a.
  - **Endpoint:** `GET /api/products`
  - **Formato de Respuesta:** `XML`.

- **3. Microservicio de Pedidos:**
  - **Tecnolog√≠a:** Python + Flask.
  - **Responsabilidad:** Procesar el carrito de compras, validar datos, calcular totales y registrar el pedido en la base de datos.
  - **Endpoint:** `POST /api/pedidos`
  - **Formato de Entrada:** `JSON`.

- **4. Microservicio de Facturas:**
  - **Tecnolog√≠a:** Python + Flask.
  - **Responsabilidad:** Generar una factura detallada a partir de un ID de pedido existente.
  - **Endpoint:** `POST /api/facturas`
  - **Formato de Respuesta:** `XML`.  
    El frontend utiliza **XSLT** para transformar este XML en una vista HTML legible para el usuario.

## üõ†Ô∏è Stack Tecnol√≥gico

- **Frontend:** HTML5, CSS3, JavaScript (ES6+)
- **Backend (Microservicios):** Python 3, Flask
- **Base de Datos:** MariaDB
- **Arquitectura:** Microservicios, API REST
- **Formatos de Datos:** JSON, XML, XSLT

## ‚ú® Caracter√≠sticas Principales

- **Desacoplamiento de Servicios:** Cada l√≥gica de negocio (productos, pedidos, facturas) opera de forma independiente, facilitando desarrollo y mantenimiento.
- **Comunicaci√≥n As√≠ncrona:** El frontend utiliza `fetch` para interactuar con los microservicios sin recargar la p√°gina.
- **Manejo de Diferentes Formatos de Datos:** El sistema consume y produce tanto JSON como XML, clave en integraci√≥n de aplicaciones.
- **Configuraci√≥n Din√°mica:** El frontend se adapta f√°cilmente a distintos entornos (local, producci√≥n) detectando autom√°ticamente las URLs.
- **Persistencia de Datos:** Todos los pedidos y facturas se almacenan de forma segura en MariaDB.

## ‚öôÔ∏è Instalaci√≥n y Ejecuci√≥n

### Prerrequisitos
- Python 3.8 o superior
- `pip` (manejador de paquetes de Python)
- Servidor MariaDB o MySQL en ejecuci√≥n

### 1. Clonar el Repositorio
```bash
git clone https://github.com/tu-usuario/tu-repositorio.git
cd tu-repositorio
