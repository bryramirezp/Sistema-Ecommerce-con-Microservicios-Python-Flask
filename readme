# Sistema de Microservicios para una Joyer√≠a ("El Brillo")

Este proyecto es una implementaci√≥n de un sistema de comercio electr√≥nico para una joyer√≠a ficticia llamada "El Brillo", desarrollado como parte del primer parcial de la materia "Integraci√≥n de Aplicaciones y Computaci√≥n en la Nube". La principal caracter√≠stica del proyecto es su **arquitectura de microservicios**, que desacopla las responsabilidades del negocio en servicios independientes y escalables.

## Demostraci√≥n Visual

<table>
  <tr>
    <td align="center"><strong>Interfaz Principal</strong></td>
    <td align="center"><strong>Factura Generada</strong></td>
    <td align="center"><strong>Verificaci√≥n en Base de Datos</strong></td>
  </tr>
  <tr>
    <td><img src="https://raw.githubusercontent.com/bryramirezp/Portafolio-UDEM/main/Integ_aplicaciones_computacion/Parcial_1/Interfaz%20Principal%20de%20la%20Aplicaci%C3%B3n.png" alt="Interfaz principal de la joyer√≠a" width="100%"></td>
    <td><img src="https://raw.githubusercontent.com/bryramirezp/Portafolio-UDEM/main/Integ_aplicaciones_computacion/Parcial_1/Resultado%20Final%20-%20Factura%20Generada.png" alt="Factura generada en la interfaz" width="100%"></td>
    <td><img src="https://raw.githubusercontent.com/bryramirezp/Portafolio-UDEM/main/Integ_aplicaciones_computacion/Parcial_1/Verificaci%C3%B3n%20en%20la%20Base%20de%20Datos.png" alt="Consulta a la base de datos mostrando la √∫ltima factura" width="100%"></td>
  </tr>
</table>

## üöÄ Arquitectura

El sistema se compone de cuatro componentes principales que se ejecutan de forma independiente:

-   **1. Servidor Web (Frontend):**
    -   Es una **Single Page Application (SPA)** construida con HTML, CSS y JavaScript puro.
    -   Se encarga de renderizar el cat√°logo de productos, gestionar el carrito de compras y orquestar las llamadas a los diferentes microservicios.
    -   Detecta din√°micamente el *hostname* para construir las URLs de los microservicios, lo que facilita su configuraci√≥n y despliegue.

-   **2. Microservicio de Productos:**
    -   **Tecnolog√≠a:** Python + Flask.
    -   **Responsabilidad:** Gestionar y exponer el cat√°logo de productos de la joyer√≠a.
    -   **Endpoint:** `GET /api/products`
    -   **Formato de Respuesta:** `XML`.

-   **3. Microservicio de Pedidos:**
    -   **Tecnolog√≠a:** Python + Flask.
    -   **Responsabilidad:** Procesar el carrito de compras, validar los datos, calcular totales y registrar el pedido en la base de datos.
    -   **Endpoint:** `POST /api/pedidos`
    -   **Formato de Entrada:** `JSON`.

-   **4. Microservicio de Facturas:**
    -   **Tecnolog√≠a:** Python + Flask.
    -   **Responsabilidad:** Generar una factura detallada a partir de un ID de pedido existente.
    -   **Endpoint:** `POST /api/facturas`
    -   **Formato de Respuesta:** `XML`. El frontend utiliza **XSLT** para transformar este XML en una vista HTML legible para el usuario.

## üõ†Ô∏è Stack Tecnol√≥gico

-   **Frontend:** HTML5, CSS3, JavaScript (ES6+)
-   **Backend (Microservicios):** Python 3, Flask
-   **Base de Datos:** MariaDB
-   **Arquitectura:** Microservicios, API REST
-   **Formatos de Datos:** JSON, XML, XSLT

## ‚ú® Caracter√≠sticas Principales

-   **Desacoplamiento de Servicios:** Cada l√≥gica de negocio (productos, pedidos, facturas) opera de forma independiente, permitiendo un desarrollo y mantenimiento m√°s sencillos.
-   **Comunicaci√≥n As√≠ncrona:** El frontend utiliza peticiones as√≠ncronas (`fetch`) para interactuar con los microservicios sin recargar la p√°gina.
-   **Manejo de Diferentes Formatos de Datos:** El sistema demuestra la capacidad de consumir y producir datos tanto en JSON como en XML, una habilidad clave en la integraci√≥n de aplicaciones.
-   **Configuraci√≥n Din√°mica:** El frontend est√° dise√±ado para adaptarse f√°cilmente a diferentes entornos (local, producci√≥n) gracias a su detecci√≥n autom√°tica de URLs.
-   **Persistencia de Datos:** Todos los pedidos y facturas se almacenan de forma segura en una base de datos MariaDB.

## ‚öôÔ∏è Instalaci√≥n y Ejecuci√≥n

Para ejecutar este proyecto en un entorno local, sigue estos pasos:

### Prerrequisitos
-   Python 3.8 o superior
-   `pip` (manejador de paquetes de Python)
-   Un servidor de base de datos MariaDB o MySQL en ejecuci√≥n.

### 1. Clonar el Repositorio
```bash
git clone https://github.com/tu-usuario/tu-repositorio.git
cd tu-repositorio
```

### 2. Configurar la Base de Datos
-   Crea una base de datos en tu servidor MariaDB.
-   Importa el esquema de la base de datos (si tienes un archivo `.sql`) para crear las tablas `products`, `pedidos`, `detalles_pedidos` y `facturas`.
-   Aseg√∫rate de configurar las credenciales de conexi√≥n en cada uno de los archivos de los microservicios (`products_service.py`, `pedidos_service.py`, `facturas_service.py`).

### 3. Configurar y Ejecutar los Microservicios
Para cada microservicio (productos, pedidos, facturas):

```bash
# Navega al directorio del servicio
cd servicio-de-productos/

# (Opcional pero recomendado) Crea y activa un entorno virtual
python -m venv venv
source venv/bin/activate  # En Windows: venv\Scripts\activate

# Instala las dependencias
pip install Flask Flask-MySQLdb

# Ejecuta el servicio (cada uno en una terminal diferente)
# Por defecto, Flask se ejecuta en el puerto 5000. Deber√°s ejecutarlos en puertos distintos.
# Ejemplo:
flask --app products_service.py run --port=5001
flask --app pedidos_service.py run --port=5002
flask --app facturas_service.py run --port=5003
```

### 4. Servir el Frontend
-   Abre el archivo `index.html` directamente en tu navegador web.
-   Utiliza el panel de configuraci√≥n de URLs en la interfaz para apuntar a los puertos correctos donde se est√°n ejecutando tus microservicios (ej. `http://127.0.0.1:5001`, `http://127.0.0.1:5002`, etc.).

¬°Y listo! Ahora puedes interactuar con la aplicaci√≥n.

## Autor

*   **Bryan Ramirez**

---
Este proyecto fue creado con fines acad√©micos para demostrar la implementaci√≥n de una arquitectura de software moderna y distribuida.
